{"version":3,"sources":["../src/ui/graphiql.html.ts","../src/graphql/index.ts","../src/schema/utils.ts","../src/graphql/buildGraphqlSchema.ts","../src/graphql/entity.ts","../src/common/errors.ts","../src/graphql/filter.ts","../src/graphql/scalar.ts","../src/graphql/graphQLJson.ts","../src/graphql/enum.ts","../src/graphql/metadata.ts","../src/graphql/plural.ts","../src/graphql/singular.ts","../src/graphql/buildLoaderCache.ts"],"sourcesContent":["// https://github.com/graphql/graphiql/blob/main/examples/graphiql-cdn/index.html\n\nexport const graphiQLHtml = (path: string) => `<!--\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the license found in the\n *  LICENSE file in the root directory of this source tree.\n-->\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Ponder Playground</title>\n    <style>\n      body {\n        height: 100%;\n        margin: 0;\n        width: 100%;\n        overflow: hidden;\n      }\n      #graphiql {\n        height: 100vh;\n      }\n      *::-webkit-scrollbar {\n        height: 0.3rem;\n        width: 0.5rem;\n      }\n      *::-webkit-scrollbar-track {\n        -ms-overflow-style: none;\n        overflow: -moz-scrollbars-none;\n      }\n      *::-webkit-scrollbar-thumb {\n        -ms-overflow-style: none;\n        overflow: -moz-scrollbars-none;\n      }\n    </style>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/graphiql/graphiql.min.css\" />\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/@graphiql/plugin-explorer/dist/style.css\" />\n  </head>\n  <body>\n    <div id=\"graphiql\">Loading...</div>\n    <script crossorigin src=\"https://unpkg.com/react/umd/react.development.js\"></script>1\n    <script crossorigin src=\"https://unpkg.com/react-dom/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/graphiql/graphiql.min.js\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/@graphiql/plugin-explorer/dist/index.umd.js\" crossorigin=\"anonymous\"></script>\n    <script>\n      const fetcher = GraphiQL.createFetcher({ url: \"${path}\" });\n      const explorerPlugin = GraphiQLPluginExplorer.explorerPlugin();\n      const root = ReactDOM.createRoot(document.getElementById(\"graphiql\"));\n      root.render(\n        React.createElement(GraphiQL, {\n          fetcher,\n          plugins: [explorerPlugin],\n          defaultEditorToolsVisibility: false,\n        })\n      );\n    </script>\n  </body>\n</html>`;\n","import { graphiQLHtml } from \"@/ui/graphiql.html.js\";\nimport { maxAliasesPlugin } from \"@escape.tech/graphql-armor-max-aliases\";\nimport { maxDepthPlugin } from \"@escape.tech/graphql-armor-max-depth\";\nimport { maxTokensPlugin } from \"@escape.tech/graphql-armor-max-tokens\";\nimport { type YogaServerInstance, createYoga } from \"graphql-yoga\";\nimport { createMiddleware } from \"hono/factory\";\nimport { buildGraphQLSchema } from \"./buildGraphqlSchema.js\";\nimport { buildLoaderCache } from \"./buildLoaderCache.js\";\n\n/**\n * Middleware for GraphQL with an interactive web view.\n *\n * - Docs: https://ponder.sh/docs/query/api-functions#register-graphql-middleware\n *\n * @example\n * import { ponder } from \"@/generated\";\n * import { graphql } from \"@ponder/core\";\n *\n * ponder.use(\"/graphql\", graphql());\n *\n */\nexport const graphql = (\n  {\n    maxOperationTokens = 1000,\n    maxOperationDepth = 100,\n    maxOperationAliases = 30,\n  }: {\n    maxOperationTokens?: number;\n    maxOperationDepth?: number;\n    maxOperationAliases?: number;\n  } = {\n    // Default limits are from Apollo:\n    // https://www.apollographql.com/blog/prevent-graph-misuse-with-operation-size-and-complexity-limit\n    maxOperationTokens: 1000,\n    maxOperationDepth: 100,\n    maxOperationAliases: 30,\n  },\n) => {\n  let yoga: YogaServerInstance<any, any> | undefined = undefined;\n\n  return createMiddleware(async (c) => {\n    if (c.req.method === \"GET\") {\n      return c.html(graphiQLHtml(c.req.path));\n    }\n\n    if (yoga === undefined) {\n      const readonlyStore = c.get(\"readonlyStore\");\n      const metadataStore = c.get(\"metadataStore\");\n      const schema = c.get(\"schema\");\n      const graphqlSchema = buildGraphQLSchema(schema);\n\n      yoga = createYoga({\n        schema: graphqlSchema,\n        context: () => {\n          const getLoader = buildLoaderCache({ store: readonlyStore });\n          return { readonlyStore, metadataStore, getLoader };\n        },\n        graphqlEndpoint: c.req.path,\n        maskedErrors: process.env.NODE_ENV === \"production\",\n        logging: false,\n        graphiql: false,\n        parserAndValidationCache: false,\n        plugins: [\n          maxTokensPlugin({ n: maxOperationTokens }),\n          maxDepthPlugin({\n            n: maxOperationDepth,\n            ignoreIntrospection: false,\n          }),\n          maxAliasesPlugin({\n            n: maxOperationAliases,\n            allowList: [],\n          }),\n        ],\n      });\n    }\n\n    const response = await yoga.handle(c.req.raw);\n    // TODO: Figure out why Yoga is returning 500 status codes for GraphQL errors.\n    // @ts-expect-error\n    response.status = 200;\n    // @ts-expect-error\n    response.statusText = \"OK\";\n\n    return response;\n  });\n};\n","import type {\n  Column,\n  Constraints,\n  Enum,\n  EnumColumn,\n  JSONColumn,\n  ManyColumn,\n  MaterialColumn,\n  OneColumn,\n  ReferenceColumn,\n  ScalarColumn,\n  Schema,\n  Table,\n} from \"./common.js\";\n\nexport const isScalarColumn = (column: Column): column is ScalarColumn =>\n  column[\" type\"] === \"scalar\";\n\nexport const isReferenceColumn = (column: Column): column is ReferenceColumn =>\n  column[\" type\"] === \"reference\";\n\nexport const isOneColumn = (column: Column): column is OneColumn =>\n  column[\" type\"] === \"one\";\n\nexport const isManyColumn = (column: Column): column is ManyColumn =>\n  column[\" type\"] === \"many\";\n\nexport const isJSONColumn = (column: Column): column is JSONColumn =>\n  column[\" type\"] === \"json\";\n\nexport const isEnumColumn = (column: Column): column is EnumColumn =>\n  column[\" type\"] === \"enum\";\n\nexport const isOptionalColumn = (column: Column): boolean => {\n  if (isManyColumn(column) || isOneColumn(column)) return false;\n  return column[\" optional\"];\n};\n\nexport const isListColumn = (column: Column): boolean => {\n  if (\n    isManyColumn(column) ||\n    isOneColumn(column) ||\n    isReferenceColumn(column) ||\n    isJSONColumn(column)\n  )\n    return false;\n  return column[\" list\"];\n};\n\n/** Returns true if the column corresponds to a column in the database */\nexport const isMaterialColumn = (column: Column): column is MaterialColumn =>\n  isScalarColumn(column) ||\n  isReferenceColumn(column) ||\n  isEnumColumn(column) ||\n  isJSONColumn(column);\n\nexport const isTable = (\n  tableOrEnum: Schema[string],\n): tableOrEnum is { table: Table; constraints: Constraints } =>\n  !Array.isArray(tableOrEnum);\n\nexport const isEnum = (tableOrEnum: Schema[string]): tableOrEnum is Enum =>\n  Array.isArray(tableOrEnum);\n\nexport const getTables = (\n  schema: Schema,\n): { [tableName: string]: { table: Table; constraints: Constraints } } => {\n  const tables: {\n    [tableName: string]: { table: Table; constraints: Constraints };\n  } = {};\n\n  for (const [name, tableOrEnum] of Object.entries(schema)) {\n    if (isTable(tableOrEnum)) {\n      tables[name] = tableOrEnum;\n    }\n  }\n\n  return tables;\n};\n\nexport const getEnums = (schema: Schema): { [enumName: string]: Enum } => {\n  const enums: { [enumName: string]: Enum } = {};\n\n  for (const [name, tableOrEnum] of Object.entries(schema)) {\n    if (isEnum(tableOrEnum)) {\n      enums[name] = tableOrEnum;\n    }\n  }\n\n  return enums;\n};\n\nexport const extractReferenceTable = (ref: ReferenceColumn): string => {\n  return ref[\" reference\"].split(\".\")[0]!;\n};\n\nexport const encodeSchema = (schema: Schema) => {\n  return JSON.stringify({\n    tables: getTables(schema),\n    enums: getEnums(schema),\n  });\n};\n","import type { MetadataStore, ReadonlyStore } from \"@/indexing-store/store.js\";\nimport type { Schema } from \"@/schema/common.js\";\nimport { getTables } from \"@/schema/utils.js\";\nimport {\n  type GraphQLFieldConfig,\n  GraphQLObjectType,\n  GraphQLSchema,\n} from \"graphql\";\nimport type { GetLoader } from \"./buildLoaderCache.js\";\nimport { buildEntityTypes } from \"./entity.js\";\nimport { buildEnumTypes } from \"./enum.js\";\nimport { buildEntityFilterTypes } from \"./filter.js\";\nimport { metadataEntity } from \"./metadata.js\";\nimport { buildPluralField } from \"./plural.js\";\nimport { buildSingularField } from \"./singular.js\";\n\n// TODO(kyle) stricter type\nexport type Parent = Record<string, any>;\nexport type Context = {\n  getLoader: GetLoader;\n  readonlyStore: ReadonlyStore;\n  metadataStore: MetadataStore;\n};\n\nexport const buildGraphQLSchema = (schema: Schema): GraphQLSchema => {\n  const queryFields: Record<string, GraphQLFieldConfig<Parent, Context>> = {};\n\n  const { enumTypes } = buildEnumTypes({ schema });\n  const { entityFilterTypes } = buildEntityFilterTypes({ schema, enumTypes });\n  const { entityTypes, entityPageTypes } = buildEntityTypes({\n    schema,\n    enumTypes,\n    entityFilterTypes,\n  });\n\n  for (const [tableName, { table }] of Object.entries(getTables(schema))) {\n    const entityType = entityTypes[tableName]!;\n    const entityPageType = entityPageTypes[tableName]!;\n    const entityFilterType = entityFilterTypes[tableName]!;\n\n    const singularFieldName =\n      tableName.charAt(0).toLowerCase() + tableName.slice(1);\n    queryFields[singularFieldName] = buildSingularField({\n      tableName,\n      table,\n      entityType,\n    });\n\n    const pluralFieldName = `${singularFieldName}s`;\n    queryFields[pluralFieldName] = buildPluralField({\n      tableName,\n      entityPageType,\n      entityFilterType,\n    });\n  }\n\n  queryFields._meta = {\n    type: metadataEntity,\n    resolve: async (_source, _args, context) => {\n      const status = await context.metadataStore.getStatus();\n      return { status };\n    },\n  };\n\n  return new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: \"Query\",\n      fields: queryFields,\n    }),\n  });\n};\n","import type { ReferenceColumn, Schema } from \"@/schema/common.js\";\nimport {\n  extractReferenceTable,\n  getTables,\n  isEnumColumn,\n  isJSONColumn,\n  isListColumn,\n  isManyColumn,\n  isOneColumn,\n  isOptionalColumn,\n} from \"@/schema/utils.js\";\nimport {\n  GraphQLBoolean,\n  type GraphQLFieldResolver,\n  type GraphQLInputObjectType,\n} from \"graphql\";\nimport {\n  type GraphQLEnumType,\n  type GraphQLFieldConfigMap,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from \"graphql\";\nimport type { Context, Parent } from \"./buildGraphqlSchema.js\";\nimport { buildWhereObject } from \"./filter.js\";\nimport { GraphQLJSON } from \"./graphQLJson.js\";\nimport type { PluralResolver } from \"./plural.js\";\nimport { SCALARS } from \"./scalar.js\";\n\nconst GraphQLPageInfo = new GraphQLObjectType({\n  name: \"PageInfo\",\n  fields: {\n    hasNextPage: { type: new GraphQLNonNull(GraphQLBoolean) },\n    hasPreviousPage: { type: new GraphQLNonNull(GraphQLBoolean) },\n    startCursor: { type: GraphQLString },\n    endCursor: { type: GraphQLString },\n  },\n});\n\nexport const buildEntityTypes = ({\n  schema,\n  enumTypes,\n  entityFilterTypes,\n}: {\n  schema: Schema;\n  enumTypes: Record<string, GraphQLEnumType>;\n  entityFilterTypes: Record<string, GraphQLInputObjectType>;\n}) => {\n  const entityTypes: Record<string, GraphQLObjectType<Parent, Context>> = {};\n  const entityPageTypes: Record<string, GraphQLObjectType> = {};\n\n  for (const [tableName, { table }] of Object.entries(getTables(schema))) {\n    entityTypes[tableName] = new GraphQLObjectType({\n      name: tableName,\n      fields: () => {\n        const fieldConfigMap: GraphQLFieldConfigMap<Parent, Context> = {};\n\n        Object.entries(table).forEach(([columnName, column]) => {\n          if (isOneColumn(column)) {\n            // Column must resolve the foreign key of the referenced column\n            // Note: this relies on the fact that reference columns can't be lists.\n            const referenceColumn = table[\n              column[\" reference\"]\n            ] as ReferenceColumn;\n            const referencedTable = extractReferenceTable(referenceColumn);\n\n            const resolver: GraphQLFieldResolver<Parent, Context> = async (\n              parent,\n              _args,\n              context,\n            ) => {\n              // The parent object gets passed in here containing reference column values.\n              const relatedRecordId = parent[column[\" reference\"]];\n              // Note: Don't query with a null or undefined id, indexing store will throw error.\n              if (relatedRecordId === null || relatedRecordId === undefined)\n                return null;\n\n              const loader = context.getLoader({\n                tableName: referencedTable,\n              });\n\n              return await loader.load(relatedRecordId);\n            };\n\n            fieldConfigMap[columnName] = {\n              type: isOptionalColumn(referenceColumn)\n                ? entityTypes[referencedTable]!\n                : new GraphQLNonNull(entityTypes[referencedTable]!),\n              resolve: resolver,\n            };\n          } else if (isManyColumn(column)) {\n            const resolver: PluralResolver = async (parent, args, context) => {\n              const { where, orderBy, orderDirection, limit, after, before } =\n                args;\n\n              const whereObject = where ? buildWhereObject(where) : {};\n              // Add the parent record ID to the where object.\n              // Note that this overrides any existing equals condition.\n              (whereObject[column[\" referenceColumn\"]] ??= {}).equals =\n                parent.id;\n\n              const orderByObject = orderBy\n                ? { [orderBy]: orderDirection ?? \"asc\" }\n                : undefined;\n\n              // Query for the IDs of the matching records.\n              // TODO: Update query to only fetch IDs, not entire records.\n              const result = await context.readonlyStore.findMany({\n                tableName: column[\" referenceTable\"],\n                where: whereObject,\n                orderBy: orderByObject,\n                limit,\n                before,\n                after,\n              });\n\n              // Load entire records objects using the loader.\n              const loader = context.getLoader({\n                tableName: column[\" referenceTable\"],\n              });\n\n              const ids = result.items.map((item) => item.id);\n              const items = await loader.loadMany(ids);\n\n              return { items, pageInfo: result.pageInfo };\n            };\n\n            fieldConfigMap[columnName] = {\n              type: entityPageTypes[column[\" referenceTable\"]]!,\n              args: {\n                where: { type: entityFilterTypes[column[\" referenceTable\"]]! },\n                orderBy: { type: GraphQLString },\n                orderDirection: { type: GraphQLString },\n                before: { type: GraphQLString },\n                after: { type: GraphQLString },\n                limit: { type: GraphQLInt },\n              },\n              resolve: resolver,\n            };\n          } else if (isJSONColumn(column)) {\n            fieldConfigMap[columnName] = {\n              type: isOptionalColumn(column)\n                ? GraphQLJSON\n                : new GraphQLNonNull(GraphQLJSON),\n            };\n          } else {\n            const type = isEnumColumn(column)\n              ? enumTypes[column[\" enum\"]]!\n              : SCALARS[column[\" scalar\"]];\n            if (isListColumn(column)) {\n              const listType = new GraphQLList(new GraphQLNonNull(type));\n              fieldConfigMap[columnName] = {\n                type: isOptionalColumn(column)\n                  ? listType\n                  : new GraphQLNonNull(listType),\n              };\n            } else {\n              fieldConfigMap[columnName] = {\n                type: isOptionalColumn(column)\n                  ? type\n                  : new GraphQLNonNull(type),\n              };\n            }\n          }\n        });\n\n        return fieldConfigMap;\n      },\n    });\n\n    entityPageTypes[tableName] = new GraphQLObjectType({\n      name: `${tableName}Page`,\n      fields: () => ({\n        items: {\n          type: new GraphQLNonNull(\n            new GraphQLList(new GraphQLNonNull(entityTypes[tableName]!)),\n          ),\n        },\n        pageInfo: { type: new GraphQLNonNull(GraphQLPageInfo) },\n      }),\n    });\n  }\n\n  return { entityTypes, entityPageTypes };\n};\n","export class BaseError extends Error {\n  override name = \"BaseError\";\n\n  meta: string[] = [];\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, BaseError.prototype);\n  }\n}\n\nexport function getBaseError(err: any) {\n  if (err instanceof BaseError) return err;\n  if (err instanceof Error) return new BaseError(err.message);\n  if (typeof err?.message === \"string\") return new BaseError(err.message);\n  if (typeof err === \"string\") return new BaseError(err);\n  return new BaseError(\"unknown error\");\n}\n\nexport class BuildError extends BaseError {\n  override name = \"BuildError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, BuildError.prototype);\n  }\n}\n\nexport class NonRetryableError extends BaseError {\n  override name = \"NonRetryableError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, NonRetryableError.prototype);\n  }\n}\n\nexport class IgnorableError extends BaseError {\n  override name = \"IgnorableError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, IgnorableError.prototype);\n  }\n}\n\n// Indexing store errors\n\nexport class StoreError extends NonRetryableError {\n  override name = \"StoreError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, StoreError.prototype);\n  }\n}\n\nexport class UniqueConstraintError extends NonRetryableError {\n  override name = \"UniqueConstraintError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, UniqueConstraintError.prototype);\n  }\n}\n\nexport class NotNullConstraintError extends NonRetryableError {\n  override name = \"NotNullConstraintError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, NotNullConstraintError.prototype);\n  }\n}\n\nexport class RecordNotFoundError extends NonRetryableError {\n  override name = \"RecordNotFoundError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, RecordNotFoundError.prototype);\n  }\n}\n\nexport class CheckConstraintError extends NonRetryableError {\n  override name = \"CheckConstraintError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, CheckConstraintError.prototype);\n  }\n}\n\nexport class BigIntSerializationError extends NonRetryableError {\n  override name = \"BigIntSerializationError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, BigIntSerializationError.prototype);\n  }\n}\n\nexport class FlushError extends NonRetryableError {\n  override name = \"FlushError\";\n\n  constructor(message?: string | undefined) {\n    super(message);\n    Object.setPrototypeOf(this, FlushError.prototype);\n  }\n}\n","import { BuildError } from \"@/common/errors.js\";\nimport type { Schema } from \"@/schema/common.js\";\nimport {\n  getTables,\n  isEnumColumn,\n  isJSONColumn,\n  isListColumn,\n  isManyColumn,\n  isOneColumn,\n  isReferenceColumn,\n  isScalarColumn,\n} from \"@/schema/utils.js\";\nimport {\n  type GraphQLEnumType,\n  type GraphQLInputFieldConfigMap,\n  GraphQLInputObjectType,\n} from \"graphql\";\nimport { GraphQLList } from \"graphql\";\nimport { SCALARS } from \"./scalar.js\";\n\nconst filterOperators = {\n  universal: [\"\", \"_not\"],\n  singular: [\"_in\", \"_not_in\"],\n  plural: [\"_has\", \"_not_has\"],\n  numeric: [\"_gt\", \"_lt\", \"_gte\", \"_lte\"],\n  string: [\n    \"_contains\",\n    \"_not_contains\",\n    \"_starts_with\",\n    \"_ends_with\",\n    \"_not_starts_with\",\n    \"_not_ends_with\",\n  ],\n} as const;\n\nexport const buildEntityFilterTypes = ({\n  schema,\n  enumTypes,\n}: { schema: Schema; enumTypes: Record<string, GraphQLEnumType> }) => {\n  const entityFilterTypes: Record<string, GraphQLInputObjectType> = {};\n\n  for (const [tableName, { table }] of Object.entries(getTables(schema))) {\n    const filterType = new GraphQLInputObjectType({\n      name: `${tableName}Filter`,\n      fields: () => {\n        const filterFields: GraphQLInputFieldConfigMap = {\n          // Logical operators\n          AND: { type: new GraphQLList(filterType) },\n          OR: { type: new GraphQLList(filterType) },\n        };\n\n        Object.entries(table).forEach(([columnName, column]) => {\n          // Note: Only include non-virtual columns in plural fields\n          if (isOneColumn(column)) return;\n          if (isManyColumn(column)) return;\n          if (isJSONColumn(column)) return;\n\n          const type = isEnumColumn(column)\n            ? enumTypes[column[\" enum\"]]!\n            : SCALARS[column[\" scalar\"]];\n\n          if (isListColumn(column)) {\n            // List fields => universal, plural\n            filterOperators.universal.forEach((suffix) => {\n              filterFields[`${columnName}${suffix}`] = {\n                type: new GraphQLList(type),\n              };\n            });\n\n            filterOperators.plural.forEach((suffix) => {\n              filterFields[`${columnName}${suffix}`] = {\n                type,\n              };\n            });\n          } else {\n            // Scalar fields => universal, singular, numeric OR string depending on base type\n            // Note: Booleans => universal and singular only.\n            filterOperators.universal.forEach((suffix) => {\n              filterFields[`${columnName}${suffix}`] = {\n                type,\n              };\n            });\n\n            filterOperators.singular.forEach((suffix) => {\n              filterFields[`${columnName}${suffix}`] = {\n                type: new GraphQLList(type),\n              };\n            });\n\n            if (\n              (isScalarColumn(column) || isReferenceColumn(column)) &&\n              [\"int\", \"bigint\", \"float\", \"hex\"].includes(column[\" scalar\"])\n            ) {\n              filterOperators.numeric.forEach((suffix) => {\n                filterFields[`${columnName}${suffix}`] = {\n                  type: type,\n                };\n              });\n            }\n\n            if (\n              (isScalarColumn(column) || isReferenceColumn(column)) &&\n              \"string\" === column[\" scalar\"]\n            ) {\n              filterOperators.string.forEach((suffix) => {\n                filterFields[`${columnName}${suffix}`] = {\n                  type: type,\n                };\n              });\n            }\n          }\n        });\n\n        return filterFields;\n      },\n    });\n\n    entityFilterTypes[tableName] = filterType;\n  }\n\n  return { entityFilterTypes };\n};\n\nconst graphqlFilterToStoreCondition = {\n  \"\": \"equals\",\n  not: \"not\",\n  in: \"in\",\n  not_in: \"notIn\",\n  has: \"has\",\n  not_has: \"notHas\",\n  gt: \"gt\",\n  lt: \"lt\",\n  gte: \"gte\",\n  lte: \"lte\",\n  contains: \"contains\",\n  not_contains: \"notContains\",\n  starts_with: \"startsWith\",\n  not_starts_with: \"notStartsWith\",\n  ends_with: \"endsWith\",\n  not_ends_with: \"notEndsWith\",\n} as const;\n\nexport function buildWhereObject(where: Record<string, any>) {\n  const whereObject: Record<string, any> = {};\n\n  for (const [whereKey, rawValue] of Object.entries(where)) {\n    // Handle the `and` and `or` operators.\n    if (whereKey === \"AND\" || whereKey === \"OR\") {\n      if (!Array.isArray(rawValue)) {\n        throw new BuildError(\n          `Invalid query: Expected an array for the ${whereKey} operator. Got: ${rawValue}`,\n        );\n      }\n\n      whereObject[whereKey] = rawValue.map(buildWhereObject);\n      continue;\n    }\n\n    const [fieldName, condition_] = whereKey.split(/_(.*)/s);\n    // This is a hack to handle the \"\" operator, which the regex above doesn't handle\n    const condition = (\n      condition_ === undefined ? \"\" : condition_\n    ) as keyof typeof graphqlFilterToStoreCondition;\n\n    const storeCondition = graphqlFilterToStoreCondition[condition];\n    if (!storeCondition) {\n      throw new BuildError(\n        `Invalid query: Unknown where condition: ${fieldName}_${condition}`,\n      );\n    }\n\n    whereObject[fieldName!] ||= {};\n    whereObject[fieldName!][storeCondition] = rawValue;\n  }\n\n  return whereObject;\n}\n","import { BuildError } from \"@/common/errors.js\";\nimport type { Scalar } from \"@/schema/common.js\";\nimport {\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLScalarType,\n  GraphQLString,\n} from \"graphql\";\n\nconst GraphQLBigInt = new GraphQLScalarType({\n  name: \"BigInt\",\n  serialize: (value) => String(value),\n  parseValue: (value) => BigInt(value as any),\n  parseLiteral: (value) => {\n    if (value.kind === \"StringValue\") {\n      return BigInt(value.value);\n    } else {\n      throw new BuildError(\n        `Invalid value kind provided for field of type BigInt: ${value.kind}. Expected: StringValue`,\n      );\n    }\n  },\n});\n\nexport const SCALARS: { [type in Scalar]: GraphQLScalarType } = {\n  int: GraphQLInt,\n  float: GraphQLFloat,\n  string: GraphQLString,\n  boolean: GraphQLBoolean,\n  bigint: GraphQLBigInt,\n  hex: GraphQLString,\n};\n","import {\n  type GraphQLScalarLiteralParser,\n  GraphQLScalarType,\n  Kind,\n  type ObjectValueNode,\n  type ValueNode,\n  print,\n} from \"graphql\";\n\n// Modified from https://github.com/taion/graphql-type-json/blob/master/src/index.js\n\nexport const GraphQLJSON = new GraphQLScalarType({\n  name: \"JSON\",\n  description:\n    \"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\",\n  serialize: (x) => x,\n  parseValue: (x) => x,\n  parseLiteral: (ast, variables) => {\n    if (ast.kind !== Kind.OBJECT) {\n      throw new TypeError(\n        `JSONObject cannot represent non-object value: ${print(ast)}`,\n      );\n    }\n\n    return parseObject(ast, variables);\n  },\n});\n\nconst parseLiteral = (\n  ast: ValueNode,\n  variables: Parameters<GraphQLScalarType[\"parseLiteral\"]>[1],\n): ReturnType<GraphQLScalarLiteralParser<unknown>> => {\n  switch (ast.kind) {\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n      return ast.value;\n    case Kind.INT:\n    case Kind.FLOAT:\n      return Number.parseFloat(ast.value);\n    case Kind.OBJECT:\n      return parseObject(ast, variables);\n    case Kind.LIST:\n      return ast.values.map((n) => parseLiteral(n, variables));\n    case Kind.NULL:\n      return null;\n    case Kind.VARIABLE:\n      return variables ? variables[ast.name.value] : undefined;\n    default:\n      throw new TypeError(`JSON cannot represent value: ${print(ast)}`);\n  }\n};\n\nconst parseObject = (\n  ast: ObjectValueNode,\n  variables: Parameters<GraphQLScalarType[\"parseLiteral\"]>[1],\n) => {\n  const value = Object.create(null);\n  ast.fields.forEach((field) => {\n    value[field.name.value] = parseLiteral(field.value, variables);\n  });\n\n  return value;\n};\n","import type { Schema } from \"@/schema/common.js\";\nimport { getEnums } from \"@/schema/utils.js\";\nimport { GraphQLEnumType } from \"graphql\";\n\nexport function buildEnumTypes({ schema }: { schema: Schema }) {\n  const enumTypes: Record<string, GraphQLEnumType> = {};\n\n  for (const [enumName, _enum] of Object.entries(getEnums(schema))) {\n    enumTypes[enumName] = new GraphQLEnumType({\n      name: enumName,\n      values: _enum.reduce(\n        (acc: Record<string, {}>, cur) => ({ ...acc, [cur]: {} }),\n        {},\n      ),\n    });\n  }\n\n  return { enumTypes };\n}\n","import { GraphQLObjectType } from \"graphql\";\nimport { GraphQLJSON } from \"./graphQLJson.js\";\n\nexport const metadataEntity = new GraphQLObjectType({\n  name: \"_meta\",\n  fields: { status: { type: GraphQLJSON } },\n});\n","import {\n  type GraphQLFieldConfig,\n  type GraphQLFieldResolver,\n  type GraphQLInputObjectType,\n  GraphQLInt,\n  GraphQLNonNull,\n  type GraphQLObjectType,\n  GraphQLString,\n} from \"graphql\";\nimport type { Context, Parent } from \"./buildGraphqlSchema.js\";\nimport { buildWhereObject } from \"./filter.js\";\n\ntype PluralArgs = {\n  where?: { [key: string]: number | string };\n  after?: string;\n  before?: string;\n  limit?: number;\n  orderBy?: string;\n  orderDirection?: \"asc\" | \"desc\";\n};\n\nexport type PluralResolver = GraphQLFieldResolver<Parent, Context, PluralArgs>;\n\nexport const buildPluralField = ({\n  tableName,\n  entityPageType,\n  entityFilterType,\n}: {\n  tableName: string;\n  entityPageType: GraphQLObjectType;\n  entityFilterType: GraphQLInputObjectType;\n}): GraphQLFieldConfig<Parent, Context> => {\n  const resolver: PluralResolver = async (_, args, context) => {\n    const { where, orderBy, orderDirection, before, limit, after } = args;\n\n    const whereObject = where ? buildWhereObject(where) : {};\n\n    const orderByObject = orderBy\n      ? { [orderBy]: orderDirection || \"asc\" }\n      : undefined;\n\n    return await context.readonlyStore.findMany({\n      tableName,\n      where: whereObject,\n      orderBy: orderByObject,\n      limit,\n      before,\n      after,\n    });\n  };\n\n  return {\n    type: new GraphQLNonNull(entityPageType),\n    args: {\n      where: { type: entityFilterType },\n      orderBy: { type: GraphQLString },\n      orderDirection: { type: GraphQLString },\n      before: { type: GraphQLString },\n      after: { type: GraphQLString },\n      limit: { type: GraphQLInt },\n    },\n    resolve: resolver,\n  };\n};\n","import type { Table } from \"@/schema/common.js\";\nimport type { GraphQLObjectType } from \"graphql\";\nimport {\n  type GraphQLFieldConfig,\n  type GraphQLFieldResolver,\n  GraphQLNonNull,\n} from \"graphql\";\nimport type { Context, Parent } from \"./buildGraphqlSchema.js\";\nimport { SCALARS } from \"./scalar.js\";\n\ntype SingularArgs = {\n  id?: string;\n};\ntype SingularResolver = GraphQLFieldResolver<Parent, Context, SingularArgs>;\n\nexport const buildSingularField = ({\n  tableName,\n  table,\n  entityType,\n}: {\n  tableName: string;\n  table: Table;\n  entityType: GraphQLObjectType<Parent, Context>;\n}): GraphQLFieldConfig<Parent, Context> => {\n  const resolver: SingularResolver = async (_, args, context) => {\n    const { id } = args;\n\n    if (id === undefined) return null;\n\n    const entityInstance = await context.readonlyStore.findUnique({\n      tableName,\n      id,\n    });\n\n    return entityInstance;\n  };\n\n  return {\n    type: entityType,\n    args: {\n      id: { type: new GraphQLNonNull(SCALARS[table.id[\" scalar\"]]) },\n    },\n    resolve: resolver,\n  };\n};\n","import type { ReadonlyStore } from \"@/indexing-store/store.js\";\nimport DataLoader from \"dataloader\";\n\nexport type GetLoader = ReturnType<typeof buildLoaderCache>;\n\nexport function buildLoaderCache({ store }: { store: ReadonlyStore }) {\n  const loaderCache: Record<\n    string,\n    DataLoader<string | number | bigint, any> | undefined\n  > = {};\n\n  return ({ tableName }: { tableName: string }) => {\n    const loader = (loaderCache[tableName] ??= new DataLoader(\n      async (ids) => {\n        const rows = await store.findMany({\n          tableName,\n          where: { id: { in: ids } },\n          limit: ids.length,\n        });\n\n        return ids.map((id) => rows.items.find((row) => row.id === id));\n      },\n      { maxBatchSize: 1_000 },\n    ));\n\n    return loader;\n  };\n}\n"],"mappings":"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","names":["GraphQLObjectType","GraphQLBoolean","GraphQLInt","GraphQLList","GraphQLString","GraphQLScalarType","GraphQLBoolean","GraphQLString","GraphQLInt","GraphQLList","GraphQLObjectType","GraphQLObjectType","GraphQLInt","GraphQLNonNull","GraphQLString","GraphQLNonNull","GraphQLString","GraphQLInt","GraphQLNonNull","GraphQLNonNull","GraphQLObjectType"]}